### These workflow rules prevent duplicate pipelines
# See https://docs.gitlab.com/ee/ci/yaml/README.html#workflow
workflow:
  rules:
    # If a commit to master/main is a version bump, skip the pipeline since the tag pipeline will also run
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_MESSAGE =~ /^\[bump\]/i'
      when: never
    # Otherwise run any other pipeline
    - when: always

variables:
  PYTHON_CI_IMAGE: "registry.gitlab.com/schubergphilis/python/cookiecutter-hypermodern-python/python-ci:latest"

stages:
  - lint
  - test
  - release
  - upload_image

.lint_test_rules:
  rules:
    - if: "$CI_COMMIT_TAG == null"

lint:
  extends: .lint_test_rules
  stage: lint
  needs: []
  image: $PYTHON_CI_IMAGE
  script:
    # Generate the code quality report and ignore failure if any
    - nox -s lint -- --format=codeclimate --output-file code-quality-report.json --exit-zero
    # Run lint again to produce human readable output
    - nox -rs lint
  artifacts:
    when: always
    paths:
      - flake-readable-output.txt
    reports:
      codequality: code-quality-report.json

safety:
  extends: .lint_test_rules
  stage: test
  needs: []
  image: $PYTHON_CI_IMAGE
  script:
    - nox -s safety

test:
  extends: .lint_test_rules
  stage: test
  needs: []
  image: $PYTHON_CI_IMAGE
  script:
    - nox -s tests -- --cov -m "not e2e" --junitxml=junit-report.xml
    - nox -rs coverage -- xml
    - nox -rs typeguard
  artifacts:
    when: always
    reports:
      cobertura: coverage.xml
      junit: junit-report.xml

release:
  stage: release
  variables:
    GL_TOKEN: ${GL_PIPELINE_ACCESS_TOKEN}
  rules:
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
  image: $PYTHON_CI_IMAGE
  script:
    - git config user.email "${GL_PIPELINE_USER_EMAIL}"
    - git config user.name "${GL_PIPELINE_USER_NAME}"
    # semantic-release will also create a tag with the version number which will trigger
    # the next build stage.
    - semantic-release publish

upload_image:
  stage: upload_image
  # Only run this job for SemVer tags
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v(\d+)\.(\d+)\.(\d+)(-.+)?$/'
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  variables:
    # Push both with the current version number and `latest` as tags
    TAGGED_IMAGE: "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"
    LATEST_IMAGE: "$CI_REGISTRY_IMAGE:latest"
  before_script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n $CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD | base64)\"}}}" > /kaniko/.docker/config.json
  script:
    - /kaniko/executor --context "$CI_PROJECT_DIR" --dockerfile "$CI_PROJECT_DIR/Dockerfile" --destination "$TAGGED_IMAGE" --destination "$LATEST_IMAGE"
#
#sample_deploy_job:
#  stage: deploy
#  image: "$CI_REGISTRY_IMAGE:latest"
#  variables:
#    # Do not check out code as the prebuilt container already contains the code as a poetry package
#    GIT_STRATEGY: clone
#  # Only run this job for SemVer tags
#  rules:
#    - if: '$CI_COMMIT_TAG =~ /^v(\d+)\.(\d+)\.(\d+)(-.+)?$/'
#  before_script:
#    # The code exists at the container's WORKDIR (/home/python), not at the default working
#    # directory of Gitlab jobs since we skipped the git checkout
#    - cd /home/python
#  script:
#    - poetry run mqsense --version
